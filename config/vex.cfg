# Main or global configuration block.
[main]
  # Global cache setting.  Can be overridden on a model by model basis(not recommended)
  cache = enabled
  
  # Delayed job - Requires you run a rake db:migrate to set up sqlite
  delayed_jobs = enabled
  
  # Base Object configures the default dashboard
  base_object = node
  
  # Database configuration: Not yet Implemented
  database:
  - database: vex
  - user: vex
  - password: vex
  - port: 27017
  - address: 127.0.0.1
  
  # Source model configuration from database
  # model_source = database

# Hiera configuration for our hierarchy - hiera-vex backend will retrieve this.
[hierarchy]
  - classes/%{::class}
  - classes/%{::class}/osfamily/%{::osfamily}        # Scoped
  - classes/%{::class}/environment/%{::environment}  # Scoped
  - roles/%{::role}
  - roles/%{::role}/osfamily/%{::osfamily}           # Scoped
  - roles/%{::role}/environment/%{::environment}     # Scoped
  - pools/%{::pool}
  - nodes/%{::clientcert}
  - services/%{::service}
  - services/%{::class}

# Models configuration - dynamically creates models based off our defined baseclass via the parser and DSL
[node]
  # Puppet Type associates it with a given puppet type and gives the model behavior on that basis
  puppet_type = node  # Nodes have facts and can simulate a hiera run
  
  # Display order, defaults to alphabetical
  display = elements, roles, services, pools
  
  # Next up are assignments, the keyword determines dependency relationships.  Syntax is yaml-esque
  # Assigned_and_assigned_to defines a two-way relationship
  assigned_and_assigned_to:
  - pools
  - services: pools
  
  # Assigned defines a one way relationship, the object is dependent on things it is assigned
  assigned:
  - elements: pools, roles
  - roles: pools
  
[element]
  # Routed as enables our model and our UX to differ.  
  routed_as = classes # Present elements as "classes"
  
  puppet_type = class # Doesn't do anything for now.
  
  # Scopes set the has_scopes keyword and default scope scopes
  scopes = environment, osfamily
  
  # Assigned_to defines a one way relationship, the object "triggers" things it is assigned to
  assigned_to:
  - nodes: pools, roles
  - services: roles
  - pools: roles
  - roles 
  
[service]
  # Self joining makes the object act as a tree
  self_joining = enabled
  
  # Scoping on a model or routed as sets up a scope keyed to any associated models of that type
  scopes = classes
  
  assigned_and_assigned_to:
  - pools
  - nodes: pools
  assigned:
  - roles
  - elements: roles
  
[role]
  scopes = environment, osfamily
  assigned_to:
  - pools
  - services
  - nodes: pools
  assigned:
  - elements
  
[pool]
  assigned_and_assigned_to:
  - nodes
  - services
  assigned:
  - elements: roles
  - roles 