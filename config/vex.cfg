# Main or global configuration block.
[main]
  # Global cache setting.  Can be overridden on a model by model basis(not recommended)
  cache = enabled

# Hiera configuration for our hierarchy
[hierarchy]
  

# Models configuration - dynamically creates models based off our defined baseclass via the parser and DSL
[node]
  # Puppet Type associates it with a given puppet type and gives the model behavior on that basis
  # Nodes have facts and can simulate a hiera run
  puppet_type = node
  
  # Next up are assignments, the keyword determines dependency relationships
  # Assigned_and_assigned_to defines a two-way relationship
  assigned_and_assigned_to:
  - pools
  - services: pools
  
  # Assigned defines a one way relationship, the object is dependent on things it is assigned
  assigned:
  - elements: pools, roles
  - roles: pools
  
[element]
  # Routed as enables our model and our UX to differ.  Elements are presented as "classes"
  routed_as = classes
  
  # Elements correspond to a puppet class
  puppet_type = class
  
  # Scopes set the has_scopes keyword and default scope scopes
  scopes = environment, osfamily
  
  # Assigned_to defines a one way relationship, the object "triggers" things it is assigned to
  assigned_to:
  - nodes: pools, roles
  - services: roles
  - pools: roles
  - roles 
  
[service]
  # Self joining makes the object act as a tree
  self_joining = enabled
  
  # Scoping on a model or routed as sets up a scope keyed to any associated models of that type
  scopes = classes
  
  assigned_and_assigned_to:
  - pools
  - nodes: pools
  assigned:
  - roles
  - elements: roles
  
[role]
  scopes = environment, osfamily
  assigned_to:
  - pools
  - services
  - nodes: pools
  assigned:
  - elements
  
[pool]
  assigned_and_assigned_to:
  - nodes
  - services
  assigned:
  - elements: roles
  - roles 